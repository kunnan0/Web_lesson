(1)CSS的“无障碍”概念，即在使用CSS为网页增加样式时，要尽量保持“傻瓜式”的支持，让用户更简单直观地明白网页中各个部分是干什么用的，以保障用户迅速找到他们所需要的功能或模块。

(2)CSS选择器: 相邻选择器 + 。 使用相邻选择器能够通过同级(兄弟关系)元素来定位一个元素。如：

p+span {...}

就是找到紧邻着p标签的span标签(而不是p标签内的span)。还可以更复杂：

div+p+ul {...}

找到一个ul，这个ul在一个p标签后面，而这个p标签又在一个div后面。

小练习：
div p+ul .list2 {...}
寻找的是div标签[里面]的，紧邻p标签[之后]的ul[里面]的，类名为list2的元素 


(3)结构与样式相分离：如果可能，尽量不要把html和css写在一起，这样难以维护且代码重复度高。


(4)css一般不会报错。当遇到无法解析或书写错误的语句，浏览器会直接忽略它，继续执行后面的语句。
    ps：css中的单词基本都是美式英语拼写，如color不能写成colour。

(5)属性选择器-存否和值选择器：

    只根据是否有该属性来选择：[id] 只要有属性id就会被选中；也可以更具体的指定 a[class] 所有带有class属性的a标签会被选中。ps:属性名不需要双引号
    
    根据属性名和属性值来选择：[id="item"] 选中具有属性id，且值为item的标签。同上可以指定标签。ps:属性值需要用双引号
    
    对属性值更宽泛的选择：[class~="box"] 选中class属性中有box这个值的标签（用空格隔开的多个值中有一个值是box）。其他同上。
                        [class|="box"] 选中class值为box，或者值以box开头并以-连接的标签。 如 <div class="box-1"></div>
                        
(6)属性选择器-子字符串匹配：

    匹配开头: [class^="box"] 选中有class属性且值以box开头的元素。 <div class="box1"></div>
    匹配结尾: [class$="box"] 选中有class属性且值以box结尾的元素。 <div class="1box"></div>
    任意匹配: [class*="box"] 选中有class属性且值中存在box这段字符的元素。 <div class="helloboxworld"></div>
ps: 与(5)不同，这里是在一个字符串中匹配，box不需要是一个独立的值

    大小写不敏感: [class="box" i] 在前面的任意对属性值的选择器都可用，只需要在中括号闭合前加一个 i ，即可忽略大小写进行匹配。<div class="BoX"></div>
ps: 默认是大小写敏感的



